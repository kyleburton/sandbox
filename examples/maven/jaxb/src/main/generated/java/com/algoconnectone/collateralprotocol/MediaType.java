//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.03.11 at 09:48:37 PM EST 
//


package com.algoconnectone.collateralprotocol;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MediaType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MediaType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="long-play-record"/>
 *     &lt;enumeration value="compact-disk"/>
 *     &lt;enumeration value="eight-track-tape"/>
 *     &lt;enumeration value="cassette-tape"/>
 *     &lt;enumeration value="mini-disk"/>
 *     &lt;enumeration value="digital-mp3"/>
 *     &lt;enumeration value="digital-aac"/>
 *     &lt;enumeration value="digital-wav"/>
 *     &lt;enumeration value="other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "MediaType")
@XmlEnum
public enum MediaType {

    @XmlEnumValue("long-play-record")
    LONG_PLAY_RECORD("long-play-record"),
    @XmlEnumValue("compact-disk")
    COMPACT_DISK("compact-disk"),
    @XmlEnumValue("eight-track-tape")
    EIGHT_TRACK_TAPE("eight-track-tape"),
    @XmlEnumValue("cassette-tape")
    CASSETTE_TAPE("cassette-tape"),
    @XmlEnumValue("mini-disk")
    MINI_DISK("mini-disk"),
    @XmlEnumValue("digital-mp3")
    DIGITAL_MP_3("digital-mp3"),
    @XmlEnumValue("digital-aac")
    DIGITAL_AAC("digital-aac"),
    @XmlEnumValue("digital-wav")
    DIGITAL_WAV("digital-wav"),
    @XmlEnumValue("other")
    OTHER("other");
    private final String value;

    MediaType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MediaType fromValue(String v) {
        for (MediaType c: MediaType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
