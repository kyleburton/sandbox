#!/usr/bin/env bash

# TODO[drwho]:  setup a configuration in ./resources (see the stackoverflow data set) + bake tasks for running that server
# TODO[movies]: setup a configuration in ./resources (see the stackoverflow data set) + bake tasks for running that server

source config/env.sh
NEO4J_LOCALHOST_URL="http://localhost:7474/"

NEO4J_SAMPLE_DR_WHO="http://example-data.neo4j.org/files/drwho.zip?_ga=2.152097209.1899920133.1508724655-2080012049.1508724655&_gac=1.18273355.1508724655.Cj0KCQjwg7HPBRDUARIsAMeR_0gMrjdSfPEvrp9i1gaDSnI-GrDLyPx-l3TDM5nS2iDc-6F0ZYCgycgaAqVdEALw_wcB"
NEO4J_SAMPLE_MOVIES="http://example-data.neo4j.org/3.0-datasets/cineasts.tgz?_ga=2.114415367.1899920133.1508724655-2080012049.1508724655&_gac=1.16823627.1508724655.Cj0KCQjwg7HPBRDUARIsAMeR_0gMrjdSfPEvrp9i1gaDSnI-GrDLyPx-l3TDM5nS2iDc-6F0ZYCgycgaAqVdEALw_wcB"
NEO4J_SAMPLE_BLGPST="http://example-data.neo4j.org/3.0-datasets/musicbrainz.tgz?_ga=2.114415367.1899920133.1508724655-2080012049.1508724655&_gac=1.16823627.1508724655.Cj0KCQjwg7HPBRDUARIsAMeR_0gMrjdSfPEvrp9i1gaDSnI-GrDLyPx-l3TDM5nS2iDc-6F0ZYCgycgaAqVdEALw_wcB"


function neo4j-package-name () {
  echo "$NEO4J_PACKAGE_URL" | cut -f2 -d=
}

function neo4j-package-dir () {
  basename $(neo4j-package-name) -unix.tar.gz
}


function download_sample () {
  local url="$1"
  local fname="$(basename "$(echo "$1" | cut -f1 -d?)")"
  echo "dowload_sample: $fname"
  test -f "$fname" || curl -s -o $fname "$url"
}

bake_task neo4j-install "Download and install neo4j into ./software"
function neo4j-install () {
  test -d software || mkdir software
  (
    cd software
    local package="$(neo4j-package-name)"
    test -f $package || curl "$NEO4J_PACKAGE_URL" > "$package"
    local pkgdir="$(neo4j-package-dir)"
    test -d $pkgdir || tar xzvf $package

    bake_echo_green "after starting the server, please run:"
    bake_echo_green ""
    bake_echo_green "bin/neo4j-admin set-initial-password the-password"
    bake_echo_green ""
    bake_echo_green "to set the password for the instance"
  )
  (
    cd software
    test -d sample-datasets || mkdir sample-datasets
    cd sample-datasets
    download_sample "$NEO4J_SAMPLE_DR_WHO"
    # too big :/
    # download_sample "$NEO4J_SAMPLE_BLGPST"
    cd ..

    download_sample "$NEO4J_SAMPLE_MOVIES"
    local pkgdir="$(neo4j-package-dir)"
    test -d ./$pkgdir/conf.cineasts || cp -r ../resources/conf.cineasts ./$pkgdir/
  )

  (
    local project_root="$PWD"
    cd "./software/$(neo4j-package-dir)"
    for zip_fpath in $project_root/software/sample-datasets/*.zip; do
        local dname="./data/databases/$(basename $zip_fpath .zip).db"
        echo "unzip: $zip_fpath to $dname"
        if [ ! -d "$dname" ]; then
            mkdir "$dname"
            (
              cd "$dname"
              unzip "$zip_fpath"
            )
        fi
    done
  )
  (
    local project_root="$PWD"
    cd "./software/$(neo4j-package-dir)"
    for zip_fpath in $project_root/software/sample-datasets/*.tgz; do
        local dname="./data/databases/$(basename $zip_fpath .tgz).db"
        echo "unzip: $zip_fpath to $dname"
        if [ ! -d "$dname" ]; then
            mkdir "$dname"
            (
              cd "$dname"
              tar xzvf "$zip_fpath"
              mv ./graph.db/* .
              rmdir ./graph.db
            )
        fi
    done
  )

  (
    local project_root="$PWD"
    cd "./software/$(neo4j-package-dir)/plugins"
    curl -s -o apoc-3.2.3.5-all.jar "https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.2.3.5/apoc-3.2.3.5-all.jar"
  )
}

bake_task run:neo4j "Run Neo4j (username=neo4j; password=neo4j)"
function run:neo4j () {
  (
  cd ./software/$(neo4j-package-dir)
  if [ -z "${1:-}" ]; then
      for conf in ./conf ./conf.*; do
          if [ -d "$conf" ]; then
              bake_echo_green "NEO4J_CONF=$conf bake run:neo4j start"
          fi
      done
  fi

  # NB: NEO4J_CONF must point to a directory!  not the conf file direclty :/
  if [ -n "${NEO4J_CONF:-}" ]; then
      export NEO4J_CONF
  fi
  export NEO4J_HOME="$PWD"
  ./bin/neo4j "$@"
  )
}

bake_task run:neo4j-admin "Run neo4j-admin"
function run:neo4j-admin () {
  bake_cd ./software/$(neo4j-package-dir)
  ./bin/neo4j-admin "$@"
}

bake_task run:neo4j-import "Run neo4j-import"
function run:neo4j-import () {
  bake_cd ./software/$(neo4j-package-dir)
  ./bin/neo4j-import "$@"
}

bake_task run:neo4j-shell "Run neo4j-shell"
function run:neo4j-shell () {
  bake_cd ./software/$(neo4j-package-dir)
  ./bin/neo4j-shell "$@"
}

bake_task run:cypher-shell "Run cypher"
function run:cypher-shell () {
  bake_cd ./software/$(neo4j-package-dir)
  ./bin/cypher-shell -u neo4j -p password "$@"
}

bake_task browse:neo4j "Open a browser to: $NEO4J_LOCALHOST_URL"
function browse:neo4j () {
  if [ "Darwin" = "$(uname)" ]; then
    open "$NEO4J_LOCALHOST_URL"
    return 0
  fi

  gnome-open "$NEO4J_LOCALHOST_URL"
}


bake_task clj-init "Create a new service backend project"
function clj-init () {
  bake_cd
  test -d graph-services || lein new graph-services
}

bake_task cljs-init "Create a new service frontend project"
function cljs-init () {
  bake_cd
  test -d web-app || lein new figwheel web-app
}

bake_task run:cljs "Run figwheel"
function run:cljs () {
  cd web-app
  lein figwheel
}

bake_task run:server "Run the service backend"
function run:server () {
  cd graph-services
  lein run
}

bake_task install "Install neo4j, set up clj and cljs projects"
function install () {
  neo4j-install
  cljs-init
  clj-init
}



################################################################################
# training examples

bake_task class:import1 "First Import process"
function class:import1 () {
  local NEO4J="$PWD/software/$(neo4j-package-dir)"
  local NEO4J_DATA_PATH="$(neo4j-package-dir)/data/databases"
  local NEO4J_SAMPLE_DATA_PATH="./software/sample-datasets"
  local DSET_URL="https://s3.amazonaws.com/datasets.neo4j.org/extracted.zip"

  (
    cd software
    local pkgdir="$(neo4j-package-dir)"
    test -d ./$pkgdir/conf.stackoverflow || cp -r ../resources/conf.stackoverflow ./$pkgdir/
  )

  bake_echo_red -n "Loading this data takes a while, are you sure you want to reload it?  (press enter)"
  local FOO=""
  read FOO

  test -f ./software/sample-datasets/extracted.zip || curl -s -o "./software/sample-datasets/extracted.zip" "$DSET_URL"
  (
    cd software/sample-datasets
    test -d extracted || unzip extracted.zip

    $NEO4J/bin/neo4j-admin import \
      --mode csv \
      --database stackoverflow.db \
      --id-type string \
      --nodes:Post extracted/Posts_header.csv,extracted/Posts.csv.gz \
      --nodes:User extracted/Users_header.csv,extracted/Users.csv.gz \
      --nodes:Tag  extracted/Tags_header.csv,extracted/Tags.csv.gz \
      --relationships:PARENT_OF extracted/PostsRels_header.csv,extracted/PostsRels.csv.gz \
      --relationships:ANSWERS extracted/PostsAnswers_header.csv,extracted/PostsAnswers.csv.gz \
      --relationships:HAS_TAG extracted/TagsPosts_header.csv,extracted/TagsPosts.csv.gz \
      --relationships:POSTED extracted/UsersPosts_header.csv,extracted/UsersPosts.csv.gz \
      --ignore-missing-nodes true
  )

}

# bake_task minikube:install "Install minikube: https://github.com/kubernetes/minikube"
# function minikube:install () {
#   brew cask install minikube
#   bake_echo_green "Great, now run: "
#   bake_echo_green "  minikube start"
# }
