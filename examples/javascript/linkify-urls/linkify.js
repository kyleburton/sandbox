// http://stackoverflow.com/questions/14863026/javascript-regex-find-all-possible-matches-even-in-already-captured-matches
// http://code.tutsplus.com/tutorials/8-regular-expressions-you-should-know--net-6149
(function (root) {
  var self = {regexes: {}};
  root.Linkify = self;

  
  self.regexes.url          = /(?:https?:\/\/)?(?:[\da-z\.-]+)\.(?:[a-z\.]{2,6})(?:[\/\w \.-]*)*\/?/gm;

  // http://www.bennetyee.org/ucsd-pages/area.html
  // optional leading 1, optional separator (dot, dash or space)
  //self.regexes.usPhoneNumber = /1?[\-\. ]\(?(?:201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|224|225|226|228|229|231|234|236|239|240|242|246|248|250|251|252|253|254|256|260|262|264|267|268|269|270|276|278|281|283|284|289|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|321|323|325|330|331|334|336|337|339|340|341|345|347|351|352|360|361|369|380|385|386|401|402|403|404|405|406|407|408|409|410|411|412|413|414|415|416|417|418|419|423|424|425|430|432|434|435|438|440|441|442|443|450|456|464|469|470|473|475|478|479|480|484|500|501|502|503|504|505|506|507|508|509|510|511|512|513|514|515|516|517|518|519|520|530|540|541|551|555|557|559|561|562|563|564|567|570|571|573|574|575|580|585|586|600|601|602|603|604|605|606|607|608|609|610|611|612|613|614|615|616|617|618|619|620|623|626|627|628|630|631|636|641|646|647|649|650|651|660|661|662|664|669|670|671|678|679|682|684|689|700|701|702|703|704|705|706|707|708|709|710|711|712|713|714|715|716|717|718|719|720|724|727|731|732|734|737|740|747|754|757|758|760|762|763|764|765|767|769|770|772|773|774|775|778|779|780|781|784|785|786|787|800|801|802|803|804|805|806|807|808|809|810|811|812|813|814|815|816|817|818|819|822|828|829|830|831|832|833|835|843|844|845|847|848|850|855|856|857|858|859|860|862|863|864|865|866|867|868|869|870|872|876|877|878|880|881|882|888|898|900|901|902|903|904|905|906|907|908|909|910|911|912|913|914|915|916|917|918|919|920|925|927|928|931|935|936|937|939|940|941|947|949|951|952|954|956|957|959|970|971|972|973|975|976|978|979|980|984|985|989|999)\)?\d{3}[\-\. ]\d{4}/gm;
  self.regexes.usPhoneNumber = /\(?(?:201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|224|225|226|228|229|231|234|236|239|240|242|246|248|250|251|252|253|254|256|260|262|264|267|268|269|270|276|278|281|283|284|289|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|321|323|325|330|331|334|336|337|339|340|341|345|347|351|352|360|361|369|380|385|386|401|402|403|404|405|406|407|408|409|410|411|412|413|414|415|416|417|418|419|423|424|425|430|432|434|435|438|440|441|442|443|450|456|464|469|470|473|475|478|479|480|484|500|501|502|503|504|505|506|507|508|509|510|511|512|513|514|515|516|517|518|519|520|530|540|541|551|555|557|559|561|562|563|564|567|570|571|573|574|575|580|585|586|600|601|602|603|604|605|606|607|608|609|610|611|612|613|614|615|616|617|618|619|620|623|626|627|628|630|631|636|641|646|647|649|650|651|660|661|662|664|669|670|671|678|679|682|684|689|700|701|702|703|704|705|706|707|708|709|710|711|712|713|714|715|716|717|718|719|720|724|727|731|732|734|737|740|747|754|757|758|760|762|763|764|765|767|769|770|772|773|774|775|778|779|780|781|784|785|786|787|800|801|802|803|804|805|806|807|808|809|810|811|812|813|814|815|816|817|818|819|822|828|829|830|831|832|833|835|843|844|845|847|848|850|855|856|857|858|859|860|862|863|864|865|866|867|868|869|870|872|876|877|878|880|881|882|888|898|900|901|902|903|904|905|906|907|908|909|910|911|912|913|914|915|916|917|918|919|920|925|927|928|931|935|936|937|939|940|941|947|949|951|952|954|956|957|959|970|971|972|973|975|976|978|979|980|984|985|989|999)\)?[-\s]?(?:\d{3})[-\s]?(?:\d{4})/gm;
  self.regexes.usPhones = [
    /1.?\d{3}.?\d{3}.?\d{4}/gm, 
    /1.?\(\d{3}\)[-\. ]?\d{3}.?\d{4}/gm, 
    // 1 (610) 555-1212
    /1 \(\d{3}\) \d{3}-\d{4}/gm,
    // (610) 555-1212
    /\(\d{3}\) \d{3}-\d{4}/gm,
    // 610.555.1212
    /\d{3}.?\d{3}.?\d{4}/gm,
    /\(\d{3}\).?\d{3}.?\d{4}/gm,
    // 610-555-1212
    /\d{3}-\d{3}-\d{4}/gm,
    /1?\d{10}/gm,
    /1?\(\d{3}\)\d{7}/gm
  ];

  self.regexes.emailAddress = /(?:[a-z0-9_\.-]+)@(?:[\da-z\.-]+)\.(?:[a-z\.]{2,6})/gm;

  self.canonicalizePhoneNumber = function (s) {
    s = s.toString().replace(/\D+/g, "");
    if (s.length == 10) {
      s = "1" + s;
    }
    return s;
  };

  self.findUsPhoneNumbers = function (s) {
    var res = [], matches;
    _.each(self.regexes.usPhones, function (regex, idx) {
      regex = eval(regex.toString());
      matches = regex.exec(s);
      //res = res.concat(matches);
      while (matches && !_.isEmpty(matches[0])) {
        res = res.concat(matches);
        matches = regex.exec(s);
      }
    }, this);

    // filter out nulls
    res = _.filter(res, function (elt) { return !!elt; });
    res = _.map(res, self.canonicalizePhoneNumber);
    res = _.uniq(res);

    return res;
  };

  self.findUrls = function (s) {
    return self.regexes.url.exec(s);
  };

  self.findEmailAddresses = function (s) {
    return self.regexes.emailAddress.exec(s);
  };

  self.findLinksInElement = function (elt) {
    var elt = $(elt), html = elt.html(), res = {html: html, id: elt.attr('data-idx')};

    res.urls      = self.findUrls(html);
    res.emails    = self.findEmailAddresses(html);
    res.usPhones  = self.findUsPhoneNumbers(html);

    return res;
  };
}(window));
