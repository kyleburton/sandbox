Tim Visher contacted me and asked me to share my experience building and
deploying services with Clojure.

Tim and I worked together at Relay Network, and Tim has been contrasting his
experiences before we worked together (in an Enterprise Shop), and after we
worked together (when Tim gained experience working at tech start-ups).

Working Titles

   "Are you converging on an O(1) software process?"
   "How we move Clojure from Development to Production"

Some of the themes we want to roll up into a talk are:

* Holistic Consistency
   Make Dev and prod as similar as possible.
* Convention over Configuration
   Support configuration so you get loose coupling and late binding, but don't require it.
* Unorthodox, but consistent, choices reduce effort of development deployment and introspection
   Anatomy of a @-main@
* Service Regstries are Complex and Cost Time
   you will want etcd or zk at some point, make that possible but don't force it a-priori
* Clojure's Live Development is Valueable, our decisions should facilitate using it
* Communication in your team: ephemeral diagrams as a tool for model alignment


Considerations:

Where possible discuss the key trade offs or considerations that lead to my choices.


Dynamic infrastucture, adaptive scaling, automatic service discovery and registration.

h3. Holistic Considerations

The same pattern applied to each service.  Nothing new to keep in mind when working on different services, they all have an NRepl, a public API and a private API.  To develop on each of them, you take the same steps, you clone and run the @-main@.

h3. Convention over Configuration

    We chose a model for the ports our services listen on, though we support configuration.
    This allows us to run our full stack of services on a single system without having
    to do any explicit configuration.  This same convention is followed in our CI, QA, UAT
    and production environments even though they are multi-system.

Configuration comes from "somewhere", for us that is JSON files.  That's behind an interface that treats it as a K/V store, so we can pretty easily replace that with someting shared (like a zk or etcd service).  Haven't done that yet, and that abstraction would still let us do dev against the JSON config while prod would be vs the config service.

Externalize configuration from the start.  Don't force a registry, use simple text files but eliminate complexity by choosing conventions.  

Discuss specific examples here: DI concerns like database connections, serivce location (amqp, web services, etc).

Port Assignments

each service has 

* an NRepl for control
* a public web port (optionaly a public facing HTTP api)
* a private web port (optionaly a internally facing HTTP api)

NRepl (rather swank) ports are allocated in the 4000-4999 range by the team
agreeing on a vlaue for the new (logical) service that doesn't conflict with
our other services.  

The public web port is in the 8000-8999 range.

The prvate web port is the public port +1.

For example, service A uses 4010, 8010 adn 8011.  Service B uses 4020, 8020 and 8021.  The serivces support these values being overriden via configuraiton but default to these values.  This means developers and ops engineers don't need to even consider configuration when attempting to run mulitple services on one system.

Default hostnames are 'localhost', this is very convienient for Dev, QA, CI.  It's still pulled from configuration though, so prod just fills the slots in with hostnames that point to load balancers or hostnames that map to Virtual IPs (EIPs) configured for HA/Fail-over.

Consideration: dynamic reconfiguration

h3. Anatomy of a @-main@

* bootstrap configuration
* launch NRepl
* configure DI resources (db pools, http apis, other initialization)
* start in-JVM services (Quartz, MQ thread pools)
* start HTTP / RPC services
* announce the service is up

h3.  Unorthodox, but consistent, choices reduce effort of development deployment and introspection

We support runing an NRepl in Dev, CI, QA and prod.  Our service's main starts the NREPL.  We run our services by executing the @-main@ in all these environments.  If your service starts successfully in dev it is very likeley to also start successfully in all other environments.

This helps minimize the differences between debugging in dev and production.

h3. Communication in your team: ephemeral diagrams as a tool for model alignment

This may seem out of place in this talk but I feel it's a key aspect of
maintaining consistency.  Consistency is enforced through culture.  

Most things in computing are abstract, they can't be seen.  I can't point at
our infrastucture in AWS or at how our services interact with each other.  

Humans are very spacially oriented in our thinking.  You're receiving
information during this talk, which is very abstract, but you're listening to
me and you're lookng at me...at least I hope you are..you might not be (point
at someone) really looking at me, but spacially you're oriented in one
direction.

Spacial reference helps us communicate.

We draw diagrams of our software, lots of them.  Typically on three by five
cards, many times a day.  We sometimes draw several in a row, ripping up and
crumpling the 3x5 cards up as we refine the diagrams.  

We don't preserve these on purpose.  They are ephemeral.  They take seconds to
draw or re-create, so there is little reluctance to making them.  If they're
not quite right (and they often are not), ok, rip it up and make another.

No one diagram can be right.  We draw these at a level of abstraction showing
only the aspects necessary for the conversation at hand.  

The fact that we practice these so often means our team (all 7 of us) each has
a good understanding of our service interactions and how our environments are
layed out.  Troubleshooting typically begins with two engineers drawing a diagram
so they can start to bisect the problem space.

This is a pretty easy thing to bootstrap in your team, and if you have 3x5
cards availble in O(1) access you can do it with very little effort.

I've found this to be a great tool for bootstraping indepence for our engineers.





Stream of consciousness:

tv: 'organize and build your services so that devs move fast and deployment is invisible
