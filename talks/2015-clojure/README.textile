Tim Visher contacted me and asked me to share my experience building and
deploying services with Clojure.

Tim and I worked together at Relay Network, and Tim has been contrasting his
experiences before we worked together (in an Enterprise Shop), and after we
worked together (when Tim gained experience working at tech start-ups).


Some of the themes we want to roll up into a talk are:

* Holistic Consistency
   Make Dev and prod as similar as possible.
* Convention over Configuration
   Support configuration so you get loose coupling and late binding, but don't require it.
* Unorthodox, but consistent, choices reduce effort of development deployment and debugging
   Anatomy of a @-main@
* Service Regstries are Complex and Cost Time
   you will want etcd or zk at some point, make that possible but don't force it a-priori


h3. Convention over Configuration

    We chose a model for the ports our services listen on, though we support configuration.
    This allows us to run our full stack of services on a single system without having
    to do any explicit configuration.  This same convention is followed in our CI, QA, UAT
    and production environments even though they are multi-system.

Configuration comes from "somewhere", for us that is JSON files.  That's behind an interface that treats it as a K/V store, so we can pretty easily replace that with someting shared (like a zk or etcd service).  Haven't done that yet, and that abstraction would still let us do dev against the JSON config while prod would be vs the config service.

Externalize configuration from the start.  Don't force a registry, use simple text files but eliminate complexity by choosing conventions.  

Discuss specific examples here: DI concerns like database connections, serivce location (amqp, web services, etc).

h3. Anatomy of a @-main@




Stream of consciousness:

tv: 'organize and build your services so that devs move fast and deployment is invisible
