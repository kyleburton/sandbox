The idea for this talk sprang out of a discussion I had with Kevin Mcallister about my having played around with it and how much fun I was having learning go.

The what of what I am enjoying is:

* fast edit, compile, run cycle
* nice set of standard libraries
* it runs fast
* comes with a built in unit testing framework
* comes with built-in coverage analysis and benchmarking
* easy to get started with, even easier if someone walks you through the how
* one standard coding convention, and a tool to enforce it

I wanted to play around with Docker and wanted to do so cheaply.  I liked what
Digital Ocean was offering so as a 'get my hands dirty with go' sample project,
I decided to write a small command line client for the Digital Ocean API.

My initial goals for the client were:

* learn more Go
* use Go's unit testing
* use Go's coverage analysis
* expirement with using well defined types (structs) for the API responses
* make a tool that would be useful in automating provisioning at Digital Ocean
* use Go's embedded documentation tool

Nice to haves:

* smart command line completion
* abstraction for command line argument handling (not flags, there's a lib for that)

Future Work:

* support an interactive shell


Step 0: WTF is Go?

  A language started at Google (2009) by none other than:

    Robert Griesemer
    Rob Pike     (yes, that Rob Pike: Unix, Plan9, Inferno, Limbo, UTF-8, and...Daivd Letterman)
    Ken Thompson (yes, that Ken Thompson: Unix, C, Plan9, UTF-8)

I could tell you more, but really I want you to get started with it.  I want to show you how you can
do the following things:

  read a file
  write a file
  parse a JSON file
  create JSON
  make an HTTP request
  shell out to another program
  connect to a database

Step 1: how to google Go

  googling for 'golang <<my term>>' instead of 'go <<my term>>'
  can save you a lot of grief.

Step 2: installing go

You can try out go right on the web: 

  http://golang.org/

Download for OSX, Linux, Windows, ...:

  http://golang.org/doc/install

Step 3: Setup

   * set GOROOT to your installation of Go,
     add $GOROOT/bin to your $PATH

   * set GOPATH to a directory, this will hold all the Go code you download and
     all the Go code you write.
  
  Don't fight it, just use $GOPATH.  Your life will be better if you follow
  this convention.
  

Go The language

  * Static, Compiled
  * Fast enough to 'go run' w/o worrying about the compliation
  * Uppercase: public
  * lowercase: private
  * comments /* // and */

Go Lang: Variables and built in Types
  Explicitly sized types int, int64, float64
  Enum types const ( c0 = itoa)
  Type goes on the right
  Built in maps and arrays
  make()
  The error type
  nil and pointers

    var foo int64
  or
    foo := 42

    make([]int, 10, 100)

  slices
  channels

Go Lang: Packages

  import
    an unreferenced import is a compile error!
    same with unused variables
      _ = foo
      import _ "foo"
  the init() function

Go Lang: Imports

Go Lang: Control Structures

  * If/else
     if err := file.Chmod(0644); err != nil {
       panic(err)
     }
  * for and range
    Sure you _can_ write:

      for i := 0; i < len(elements); i++ {
      }

    range is idiomatic:

      for idx, elt := range elements {
      }

    if you don't care about the index, ignore it:

      for _, elt := range elements {
      }

    and also works on maps:

      for currency, rate := range exchangeRates {
      }

  * switch

    actually an if/else cascade, not a jump table, no fall-through

Go Lang: Functions

  Basic function signatures
    Functions can return multiple values
    You have to accept them all when calling a function
      Underscore lets you say "I don't care"
  You can name the return parameters(!)
    If you do you can omit the return statement(!)

Go Lang: Types, Structs

  Aliases
  Structual types
  Interfaces
    Duck Typing

  Pointers, allocation via literal structs

     new(MyType)

     &MyType {
     }

  the 'zero value' convention

Go Lang: Defer, Go Routines, Channels


Go Lang: Funcitons on structures

  implement 'toString' for your struct

Go Lang: Conversions

Go Lang: Warts

  * No Generics

    No generic map/fold/filter (reduce)/sort

    eg: get the keys from a map, sorry you'll be Type-ing it:

    var currencies []string
    for k, _ := range exchangeRates {
      currencies = append(currencies, k)
    }

  * You can be typeless, but it's a PITA 

    switch t := t.(type) {
      default:
        ...
      case bool:
        ...
      case int:
        ...
      case *bool:
        ...
      ...
    }

Go Lang: Documenting your code

Go Lang: Common Packages

  * strings
  * io
  * io/util
  * fmt
  * flag
  * encoding.json
  * encoding.csv

Go Lang: Unit Testing
  * Unit Tests
  * Converage Analysis
  * Profiling and Benchmarking

Go Lang: recover() from panic()

Go Lang: Debugging

References:

  * http://golang.org/doc/effective_go.html
